(trigger
    (tab sub))

(name subplot)

(only-in [source.matlab, source.octave])

(input document document)

(output snippet)

(save nothing)

(script [#!/usr/bin/env ruby
#
# Looks through code, finds the last subplot function
# and pre-populates the new subplot call with values
# from last function. If the input values are numeric,
# we increment the last argument.
#
linesbefore = ENV['TM_LINE_NUMBER'].to_i-1
columns = ENV['TM_LINE_INDEX'].to_i
textArray = STDIN.readlines
myStr = textArray[0...linesbefore].join
myStr << textArray[linesbefore].to_s.slice(0...columns)

if myStr =~ /.*(subplot\()(\w+[*]?)(\,)(\w+[*]?)(\,)(\w+[*]?)(\))/m
  subrows, subcols, subthis = $2, $4, $6

  # We have a pure number
  subthis = subthis.to_i + 1 if subthis =~ /\A\d+\z/
else
  subrows = "rows"
  subcols = "cols"
  subthis = "current"
end

print "subplot(${1:", subrows, "},"
print "${2:", subcols, "},"
print "${3:", subthis, "})${4:, }$0"])